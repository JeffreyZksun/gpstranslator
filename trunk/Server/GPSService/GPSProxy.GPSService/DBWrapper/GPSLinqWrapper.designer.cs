#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1882
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPSProxy.GPSService.DBWrapper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GPS")]
	public partial class GPSLinqWrapperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPath(Path instance);
    partial void UpdatePath(Path instance);
    partial void DeletePath(Path instance);
    partial void InsertPathDetail(PathDetail instance);
    partial void UpdatePathDetail(PathDetail instance);
    partial void DeletePathDetail(PathDetail instance);
    #endregion
		
		public GPSLinqWrapperDataContext() : 
				base(global::GPSProxy.GPSService.Properties.Settings.Default.GPSConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public GPSLinqWrapperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GPSLinqWrapperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GPSLinqWrapperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GPSLinqWrapperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Path> Paths
		{
			get
			{
				return this.GetTable<Path>();
			}
		}
		
		public System.Data.Linq.Table<PathDetail> PathDetails
		{
			get
			{
				return this.GetTable<PathDetail>();
			}
		}
	}
	
	[Table(Name="dbo.Path")]
	public partial class Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Password;
		
		private string _Added_By;
		
		private string _Modified_By;
		
		private bool _Visible;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAdded_ByChanging(string value);
    partial void OnAdded_ByChanged();
    partial void OnModified_ByChanging(string value);
    partial void OnModified_ByChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public Path()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Added_By", DbType="NChar(50)")]
		public string Added_By
		{
			get
			{
				return this._Added_By;
			}
			set
			{
				if ((this._Added_By != value))
				{
					this.OnAdded_ByChanging(value);
					this.SendPropertyChanging();
					this._Added_By = value;
					this.SendPropertyChanged("Added_By");
					this.OnAdded_ByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified_By", DbType="NChar(50)")]
		public string Modified_By
		{
			get
			{
				return this._Modified_By;
			}
			set
			{
				if ((this._Modified_By != value))
				{
					this.OnModified_ByChanging(value);
					this.SendPropertyChanging();
					this._Modified_By = value;
					this.SendPropertyChanged("Modified_By");
					this.OnModified_ByChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PathDetail")]
	public partial class PathDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GPSSentence;
		
		private string _Added_By;
		
		private int _PathID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGPSSentenceChanging(string value);
    partial void OnGPSSentenceChanged();
    partial void OnAdded_ByChanging(string value);
    partial void OnAdded_ByChanged();
    partial void OnPathIDChanging(int value);
    partial void OnPathIDChanged();
    #endregion
		
		public PathDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_GPSSentence", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string GPSSentence
		{
			get
			{
				return this._GPSSentence;
			}
			set
			{
				if ((this._GPSSentence != value))
				{
					this.OnGPSSentenceChanging(value);
					this.SendPropertyChanging();
					this._GPSSentence = value;
					this.SendPropertyChanged("GPSSentence");
					this.OnGPSSentenceChanged();
				}
			}
		}
		
		[Column(Storage="_Added_By", DbType="NChar(50)")]
		public string Added_By
		{
			get
			{
				return this._Added_By;
			}
			set
			{
				if ((this._Added_By != value))
				{
					this.OnAdded_ByChanging(value);
					this.SendPropertyChanging();
					this._Added_By = value;
					this.SendPropertyChanged("Added_By");
					this.OnAdded_ByChanged();
				}
			}
		}
		
		[Column(Storage="_PathID", DbType="Int NOT NULL")]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					this.OnPathIDChanging(value);
					this.SendPropertyChanging();
					this._PathID = value;
					this.SendPropertyChanged("PathID");
					this.OnPathIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
